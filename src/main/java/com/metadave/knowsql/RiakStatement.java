package com.metadave.knowsql;


import com.metadave.knowsql.parser.EvalContext;
import com.metadave.knowsql.parser.KnowSQLLexer;
import com.metadave.knowsql.parser.KnowSQLParser;
import com.metadave.knowsql.parser.KnowSQLWalker;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import java.sql.*;

public class RiakStatement implements Statement {
    RiakConnection conn;

    public RiakStatement(RiakConnection conn) {
        this.conn = conn;
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        ANTLRInputStream input = new ANTLRInputStream(sql);
        KnowSQLLexer lexer = new KnowSQLLexer(input);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        KnowSQLParser parser = new KnowSQLParser(tokens);
        EvalContext ec = new EvalContext();
        ec.conn = conn;
        KnowSQLWalker ksw = new KnowSQLWalker(ec);

        // combine these two into one
        //parser.addErrorListener(new ContactErrorListener(runtimeCtx));

        ParseTreeWalker walker = new ParseTreeWalker();
        try {
            walker.walk(ksw, parser.prog());
            return ec.rs;
        } catch (Throwable t) {
            // catch parse errors. ANTLR will display a message for me.
        }
        return null;
    }

    public int executeUpdate(String sql) throws SQLException {
        return 0;
    }

    public void close() throws SQLException {
      
    }

    public int getMaxFieldSize() throws SQLException {
        return 0;
    }

    public void setMaxFieldSize(int max) throws SQLException {
      
    }

    public int getMaxRows() throws SQLException {
        return 0;
    }

    public void setMaxRows(int max) throws SQLException {
      
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
      
    }

    public int getQueryTimeout() throws SQLException {
        return 0;
    }

    public void setQueryTimeout(int seconds) throws SQLException {
      
    }

    public void cancel() throws SQLException {
      
    }

    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    public void clearWarnings() throws SQLException {
      
    }

    public void setCursorName(String name) throws SQLException {
      
    }

    public boolean execute(String sql) throws SQLException {
        return false;
    }

    public ResultSet getResultSet() throws SQLException {
        return null;
    }

    public int getUpdateCount() throws SQLException {
        return 0;
    }

    public boolean getMoreResults() throws SQLException {
        return false;
    }

    public void setFetchDirection(int direction) throws SQLException {
      
    }

    public int getFetchDirection() throws SQLException {
        return 0;
    }

    public void setFetchSize(int rows) throws SQLException {
      
    }

    public int getFetchSize() throws SQLException {
        return 0;
    }

    public int getResultSetConcurrency() throws SQLException {
        return 0;
    }

    public int getResultSetType() throws SQLException {
        return 0;
    }

    public void addBatch(String sql) throws SQLException {
      
    }

    public void clearBatch() throws SQLException {
      
    }

    public int[] executeBatch() throws SQLException {
        return new int[0];
    }

    public Connection getConnection() throws SQLException {
        return null;
    }

    public boolean getMoreResults(int current) throws SQLException {
        return false;
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return null;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return 0;
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return 0;
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return 0;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return false;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return false;
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return false;
    }

    public int getResultSetHoldability() throws SQLException {
        return 0;
    }

    public boolean isClosed() throws SQLException {
        return false;
    }

    public void setPoolable(boolean poolable) throws SQLException {
      
    }

    public boolean isPoolable() throws SQLException {
        return false;
    }

    public void closeOnCompletion() throws SQLException {
      
    }

    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }
}
